@page "/admin/products"
@layout AdminLayout
@using Entities
@inject NavigationManager NavigationManager
@inject IIceCreamService dbservice
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="admin-content">
    <div class="admin-header">
        <h3>Manage Ice Cream Products</h3>
        <button class="btn btn-primary" @onclick="ToggleAddForm">
            <i class="fas @(showAddForm ? "fa-times" : "fa-plus")"></i>
            @(showAddForm ? "Cancel" : "Add New")
        </button>
    </div>

    @if (showAddForm)
    {
        <div class="product-form">
            <h4>Add New Product</h4>
            <EditForm Model="newProduct" OnValidSubmit="SaveProduct">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label>Name</label>
                    <InputText class="form-control" @bind-Value="newProduct.Name" />
                    <ValidationMessage For="@(() => newProduct.Name)" />
                </div>

                <div class="form-group">
                    <label>Flavor</label>
                    <InputText class="form-control" @bind-Value="newProduct.Flavor" />
                    <ValidationMessage For="@(() => newProduct.Flavor)" />
                </div>

                <div class="form-group">
                    <label>Description</label>
                    <InputTextArea class="form-control" @bind-Value="newProduct.Description" />
                    <ValidationMessage For="@(() => newProduct.Description)" />
                </div>

                <div class="form-group">
                    <label>Price</label>
                    <InputNumber class="form-control" @bind-Value="newProduct.Price" />
                    <ValidationMessage For="@(() => newProduct.Price)" />
                </div>

                <div class="form-group">
                    <label>Image URL</label>
                    <InputText class="form-control" @bind-Value="newProduct.PhotoUrl" />
                    <ValidationMessage For="@(() => newProduct.PhotoUrl)" />
                </div>

                <div class="form-actions">
                    <button type="submit" class="btn btn-success">Save Product</button>
                    <button type="button" class="btn btn-secondary" @onclick="ToggleAddForm">Cancel</button>
                </div>
            </EditForm>
        </div>
    }

    <div class="product-grid">
        @foreach (var item in products)
        {
            <div class="product-card">
                <div class="product-image-container">
                    <img src="@item.PhotoUrl" 
                         class="product-image"
                         style="object-fit: contain; background: #f5f5f5;" />
                </div>
                <div class="product-details">
                    <p class="flavor">@item.Name</p>
                    <p class="flavor">@item.Flavor</p>
                    <p class="description">@(item.Description.Length > 100 ? item.Description.Substring(0, 100) + "..." : item.Description)</p>
                    <p class="price">Rs.@item.Price.ToString("0.00")</p>
                    <div class="product-actions">
                        <button class="btn btn-sm btn-primary" @onclick="() => ShowEditForm(item)">
                            <i class="fas fa-edit"></i> Edit
                        </button>
                        <button class="btn btn-sm btn-danger" @onclick="() => ShowDeleteConfirmation(item.IceCreamId, item.Name)">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@if (showEditModal)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h4>Edit Product</h4>
            <EditForm Model="editingProduct" OnValidSubmit="UpdateProduct">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label>Name</label>
                    <InputText class="form-control" @bind-Value="editingProduct.Name" />
                    <ValidationMessage For="@(() => editingProduct.Name)" />
                </div>

                <div class="form-group">
                    <label>Flavor</label>
                    <InputText class="form-control" @bind-Value="editingProduct.Flavor" />
                    <ValidationMessage For="@(() => editingProduct.Flavor)" />
                </div>

                <div class="form-group">
                    <label>Description</label>
                    <InputTextArea class="form-control" @bind-Value="editingProduct.Description" />
                    <ValidationMessage For="@(() => editingProduct.Description)" />
                </div>

                <div class="form-group">
                    <label>Price</label>
                    <InputNumber class="form-control" @bind-Value="editingProduct.Price" />
                    <ValidationMessage For="@(() => editingProduct.Price)" />
                </div>

                <div class="form-group">
                    <label>Image URL</label>
                    <InputText class="form-control" @bind-Value="editingProduct.PhotoUrl" />
                    <ValidationMessage For="@(() => editingProduct.PhotoUrl)" />
                </div>

                <div class="form-actions">
                    <button type="submit" class="btn btn-success">Update Product</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@if (showDeleteModal)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h4>Confirm Delete</h4>
            <p>Are you sure you want to delete "@productToDeleteName"?</p>
            <div class="modal-actions">
                <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                <button class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
            </div>
        </div>
    </div>
}

@code {
    private List<IceCream> products = new();
    private IceCream newProduct = new();
    private IceCream editingProduct = new();
    private bool showAddForm = false;
    private bool showEditModal = false;
    private bool showDeleteModal = false;
    private int productToDeleteId;
    private string productToDeleteName = string.Empty;

    protected override void OnInitialized()
    {
        products = dbservice.GetProducts();
    }

    private void ToggleAddForm()
    {
        showAddForm = !showAddForm;
        if (showAddForm) newProduct = new IceCream();
    }

    private void SaveProduct()
    {
        dbservice.SaveProduct(newProduct);
        products = dbservice.GetProducts();
        showAddForm = false;
        newProduct = new IceCream();
    }

    private void ShowEditForm(IceCream product)
    {
        editingProduct = new IceCream
            {
                IceCreamId = product.IceCreamId,
                Name = product.Name,
                Flavor = product.Flavor,
                Description = product.Description,
                Price = product.Price,
                PhotoUrl = product.PhotoUrl
            };
        showEditModal = true;
    }

    private void UpdateProduct()
    {
        dbservice.UpdateProduct(editingProduct);
        products = dbservice.GetProducts();
        showEditModal = false;
    }

    private void CloseEditModal()
    {
        showEditModal = false;
    }

    private void ShowDeleteConfirmation(int id, string name)
    {
        productToDeleteId = id;
        productToDeleteName = name;
        showDeleteModal = true;
    }

    private void CancelDelete()
    {
        showDeleteModal = false;
    }

    private void ConfirmDelete()
    {
        dbservice.DeleteProduct(productToDeleteId);
        products = dbservice.GetProducts();
        showDeleteModal = false;
    }
}

<style>
    .btn-primary {
        /* Base purple color matching your theme */
        background-color: #6a66bd;
        border: none;
        color: white;
        padding: 10px 20px;
        border-radius: 30px;
        font-weight: 600;
        box-shadow: 0 4px 15px rgba(106, 102, 189, 0.3);
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        position: relative;
        overflow: hidden;
    }

        /* Gradient effect on hover */
        .btn-primary:hover {
            background: linear-gradient(135deg, #6a66bd 0%, #ff6b9d 100%);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(106, 102, 189, 0.4);
        }

        /* Active/pressed state */
        .btn-primary:active {
            transform: translateY(0);
            box-shadow: 0 2px 10px rgba(106, 102, 189, 0.4);
        }

        /* Focus state for accessibility */
        .btn-primary:focus {
            outline: none;
            box-shadow: 0 0 0 3px rgba(106, 102, 189, 0.3);
        }

        /* Icon styling */
        .btn-primary i {
            font-size: 1rem;
            transition: transform 0.2s ease;
        }

        /* Add a little animation to the icon */
        .btn-primary:hover i {
            transform: scale(1.1);
        }

        /* Special style when in "Cancel" state */
        .btn-primary[class*="fa-times"] {
            background-color: #ff6b9d; /* Pink color for cancel state */
        }

            .btn-primary[class*="fa-times"]:hover {
                background: linear-gradient(135deg, #ff6b9d 0%, #ff8fab 100%);
            }

    .admin-header {
        display: flex;
        justify-content: space-between; /* This keeps the h3 on left and button on right */
        align-items: center;
        padding: 10px 0; /* Add some vertical padding */
    }

        /* Optional: If you want more space between title and button */
        .admin-header h3 {
            margin-right: auto; /* Pushes the button to the far right */
        }

    .admin-content {
        flex: 1;
        padding: 20px;
        background-color: #f8f9fa;
        /* margin-left: 250px; /* Match sidebar width */ */
    }

    .admin-header h3 {
    background: linear-gradient(45deg, #6a66bd, #ff6b9d);
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    font-size: 2rem;
    font-weight: 600;
    display: inline-block;
}

    .product-form {
        background: white;
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-control {
        width: 100%;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .form-actions {
        display: flex;
        gap: 10px;
        justify-content: flex-end;
        margin-top: 20px;
    }

    .product-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 20px;
    }

    .product-card {
        background: white;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        transition: transform 0.3s;
    }

        .product-card:hover {
            transform: translateY(-5px);
        }

    .product-image-container {
        height: 200px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #f5f5f5;
    }

    .product-image {
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
    }

    .product-details {
        padding: 15px;
    }

        .product-details h5 {
            margin-top: 0;
            color: #333;
        }

    .flavor {
        color: #666;
        font-style: italic;
        margin: 5px 0;
    }

    .Name {
        font-weight: bold;
        font-size: 1.1rem;
        color: #333;
        margin: 5px 0;
    }

    .description {
        color: #555;
        font-size: 0.9rem;
        margin: 5px 0;
    }

    .price {
        font-weight: bold;
        color: #ff6b9d;
        margin: 10px 0;
    }

    .product-actions {
        display: flex;
        gap: 10px;
    }

    /* Modal styles */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .modal-content {
        background: white;
        padding: 20px;
        border-radius: 8px;
        width: 500px;
        max-width: 90%;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 4px 20px rgba(0,0,0,0.15);
    }

    .modal-actions {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        margin-top: 20px;
    }

    @@media (max-width: 768px) {
        /* .admin-content { */
        /*     margin-left: 60px; /* Match collapsed sidebar width */ */
        /* } */

        .product-form,
        .modal-content {
            padding: 15px;
        }

        .form-actions,
        .modal-actions {
            flex-direction: column;
        }

            .form-actions button,
            .modal-actions button {
                width: 100%;
                margin-bottom: 10px;
            }
    }
</style>